# -*- coding: utf-8 -*-
"""Manajemen Data Maskapai dengan OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PqGMLSciA_2kh-iii3IWV7TwT34qZy0T

# ðŸ›« **Object Oriented Programming (OOP) dalam Manajemen Data Maskapai Penerbangan**

*Sebuah Simulasi Sistem Manajemen Data Maskapai Penerbangan Berbasis OOP*


Oleh : **Sinta Miftakhul Rohmah**

# ðŸ§¾ Deskripsi Singkat

Manajemen Data Maskapai di sini adalah sebuah program simulasi sederhana yang dirancang menggunakan konsep **Object Oriented  Programming (OOP)** untuk mengelola informasi penerbangan. Sistem ini dapat menyimpan dan menampilkan detail penerbangan seperti maskapai, jadwal keberangkatan, durasi, jumlah transit, serta informasi tambahan. Program ini juga menerapkan *inheritance* (pewarisan) dan *encapsulation* (enkapsulasi) untuk menunjukkan praktik desain perangkat lunak yang baik.

# ðŸ§± Konsep Pemrograman yang Digunakan

1.   **Class dan Object**

     Program dibangun menggunakan kelas `Penerbangan` yang berfungsi sebagai cetakan untuk setiap data penerbangan. Setiap objek mewakili satu penerbangan.
2.   **Inheritance (Pewarisan)**

     Subclass `Detail_Info` mewarisi atribut dan metode dari Penerbangan, serta menambahkan fitur tambahan seperti jenis penerbangan (domestik atau internasional).
3.   **Encapsulation (Enkapsulasi)**

      Atribut `__Price` disembunyikan (private) agar tidak diakses langsung dari luar kelas. Untuk mengaksesnya, digunakan metode getter dan setter yang aman.

# ðŸŽ¯ Tujuan Program

1. Menerapkan konsep Object Oriented Programming (OOP) dalam studi kasus penerbangan.
2. Mensimulasikan sistem informasi penerbangan yang terdiri atas beberapa komponen dan mudah dikembangkan.
3. Melatih penggunaan `inheriritance` (pewarisan) dan `encapsulation` (enkapsulasi) dalam Python.
4. Menyediakan struktur data penerbangan yang rapi dan terorganisir untuk analisis atau pengembangan selanjutnya (misalnya integrasi ke Database).

---

# ðŸ§© Komponen Isi
Sebelum membuat program, komponen yang akan digunakan sebagai variabel dalam program adalah sebagai berikut :

| Komponen          | Keterangan                           |
| ----------------- | ------------------------------------ |
| `index`           | Indeks baris                         |
| `Airline`         | Nama maskapai                        |
| `Date_of_Journey` | Tanggal keberangkatan (objek string) |
| `Source`          | Kota asal                            |
| `Destination`     | Kota tujuan                          |
| `Dep_Time`        | Waktu berangkat (string)             |
| `Duration`        | Durasi penerbangan (string)          |
| `Total_Stops`     | Jumlah transit                       |
| `Additional_Info` | Info tambahan (makanan, dll)         |
| `CrewInfo`        | Informasi Crew yang bertugas         |

## ðŸ§± Object Oriented Programming (OOP) ~ Class : `Penerbangan`

Dalam dunia pemrograman berorientasi objek atau OOP, kita dapat merepresentasikan entitas nyata dalam bentuk class yang berisi atribut dan metode. Misalnya, sebuah `penerbangan` yang biasanya memiliki data seperti nomor penerbangan, asal, tujuan, jadwal keberangkatan, dan lain-lain. Data-data tersebut akan dikelola secara terstruktur dengan memanfaatkan kelas `penerbangan` yang akan dibuat. Lebih lengkapnya sebagai berikut :
"""

class Penerbangan:
  index = None
  Airline = None
  Date_of_Journey = None
  Source = None
  Destination = None
  Dep_Time = None
  Duration = None
  Total_Stops = None
  Additional_Info = None
  __CrewInfo = None
  def __init__(self, index, Airline, Date_of_Journey, Source, Destination, Dep_Time, Duration, Total_Stops,	Additional_Info, CrewInfo):
        self.index = index
        self.Airline = Airline
        self.Date_of_Journey = Date_of_Journey
        self.Source = Source
        self.Destination = Destination
        self.Dep_Time = Dep_Time
        self.Duration = Duration
        self.Total_Stops = Total_Stops
        self.Additional_Info = Additional_Info
        self.__CrewInfo = CrewInfo
  def info_penerbangan(self):
      print("=" * 40)
      print(f"#{self.index} Informasi Penerbangan")
      print("=" * 40)
      print(f"Tanggal          : {self.Date_of_Journey}")
      print(f"Maskapai         : {self.Airline}")
      print(f"Asal             : {self.Source}")
      print(f"Tujuan           : {self.Destination}")
      print(f"Waktu Berangkat  : {self.Dep_Time}")
      print(f"Durasi           : {self.Duration}")
      print(f"Jumlah Transit   : {self.Total_Stops}")
      print(f"Info Tambahan    : {self.Additional_Info}")
      print("=" * 40)

penerbangan1 = Penerbangan(
    index=1,
    Airline="Lion Air",
    Date_of_Journey="2025-06-25",
    Source="Jakarta",
    Destination="Surabaya",
    Dep_Time="10:15",
    Duration="1h 25m",
    Total_Stops="non-stop",
    Additional_Info="Free snack",
    CrewInfo="ArdiA"
)

# Uji Fungsi OOP
penerbangan1.info_penerbangan()

# sub_class 1
class Detail_Info(Penerbangan):           #inheritance
  def jenis_penerbangan(self, Jenis):
        self.Jenis = Jenis

penerbangan1 = Detail_Info(
    index=1,
    Airline="Lion Air",
    Date_of_Journey="2025-06-25",
    Source="Jakarta",
    Destination="Surabaya",
    Dep_Time="10:15",
    Duration="1h 25m",
    Total_Stops="non-stop",
    Additional_Info="Free snack",
    CrewInfo="ArdiA"
)

# Uji Fungsi OOP
penerbangan1.jenis_penerbangan("Domestik")
penerbangan1.info_penerbangan()
print(penerbangan1.Jenis)

print(Penerbangan.__CrewInfo)     #menggunakan konsep encapsulated

"""Encapsulated berjalan dengan baik, sebab menampilkan error untuk permintaan informasi yang bersifat rahasia."""